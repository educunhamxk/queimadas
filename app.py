import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pycaret
from pycaret.regression import *
from sklearn.pipeline import Pipeline


#configuraÃ§Ã£o da pÃ¡gina
st.set_page_config(page_title="Queimadas", page_icon="ğŸ”¥", layout="centered", initial_sidebar_state="collapsed")

#definiÃ§Ã£o do tema
st.markdown("""
<style>
body {
    color: #fff;
    background-color: #4F4F4F;
}
</style>
    """, unsafe_allow_html=True)

#tÃ­tulo
st.title("As queimadas associadas ao desmatamento estÃ£o aumentando na gestÃ£o do Lula?")

#exibir imagem tema do lula
st.image("lula_queimada.png")

#texto
st.markdown("Durante as eleiÃ§Ãµes, as questÃµes ambientais, em especial o desmatamento, estiveram entre os temas mais discutidos. Essa questÃ£o foi alvo de crÃ­ticas intensas durante a gestÃ£o de Bolsonaro, e figurou como uma das principais promessas de campanha de Lula. Alguns meses se passaram desde entÃ£o, como estÃ¡ a situaÃ§Ã£o agora? O propÃ³sito deste estudo Ã© avaliar um ponto especÃ­fico do desmatamento, os nÃºmeros gerais de queimadas associadas ao recente desflorestamento. Embora as queimadas possam ter algumas causas que escapam do controle das polÃ­ticas pÃºblicas, sabemos que parte estÃ¡ ligada Ã s aÃ§Ãµes intencionais do homem, principalmente com a finalidade de usar as terras para atividades agrÃ­colas ou pastoris. Dessa forma, pretendemos analisar e contrastar os nÃºmeros de queimadas durante a gestÃ£o de ambos os presidentes. AlÃ©m disso, pretendemos utilizar tÃ©cnicas de Machine Learning para prever os nÃºmeros de queimadas no mÃªs seguinte, contribuindo para estratÃ©gias de prevenÃ§Ã£o e controle desses incidentes.")

#1Âº Bloco************************************************************************************************************************
st.subheader("AnÃ¡lises Preliminares - Queimadas")

st.markdown("O primeiro passo do estudo Ã© entender os nÃºmeros gerais das queimadas por estado, ao longo dos Ãºltimos meses e a representatividade que cada mÃªs possui nas queimadas para avaliarmos a sazonalidade. Abaixo hÃ¡ um filtro de estado que permite verificar dados de localidades especÃ­fcas.")

df = pd.read_csv("dados_queimadas.csv",delimiter=";")
#convertendo 'date' para datetime
df['date'] = pd.to_datetime(df['date'])

#criando um widget de seleÃ§Ã£o para selecionar o estado
states = df['uf'].unique()
states = [state.title() for state in states] 
selected_state = st.selectbox('Selecione um estado:', options=['Todos'] + list(states))

#filtrando os dados pelo estado selecionado
if selected_state != 'Todos':
    df = df[df['uf'].str.title() == selected_state]
    
#divindo a pÃ¡gina em dois blocos
col1, col2 = st.columns(2)

#extraindo o mÃªs
df['mes'] = df['date'].dt.month


#Primeiro grÃ¡fico -----------------------------------------------------------------------
grupo_uf = df.groupby('uf')['focuses'].sum().reset_index()
grupo_uf = grupo_uf.sort_values(by=['focuses'])

# Usando a primeira coluna para o grÃ¡fico
with col1:
    fig1, ax1 = plt.subplots(figsize=(6, 4))
    ax1.barh(grupo_uf['uf'], grupo_uf['focuses'])
    plt.title('Total Queimadas por Estado', fontsize=15)
    plt.xlabel('MÃªs')
    #plt.ylabel('Total de Queimadas')
    plt.tight_layout()
    st.pyplot(fig1)
    
#Segundo grÃ¡fico -----------------------------------------------------------------------
    
#agrupando os dados pelo mÃªs e calculando a soma do campo 'focuses'
grouped_df = df.groupby('mes')['focuses'].sum().reset_index()

#criando uma nova figura para o grÃ¡fico
fig2 = plt.figure(figsize=(6,4))

#criando um grÃ¡fico de barras
sns.barplot(x=grouped_df['mes'], y=grouped_df['focuses'], color='blue')

#usando a primeira coluna para o grÃ¡fico
with col2:
    fig2, ax2 = plt.subplots(figsize=(6, 4))
    ax2.bar(grouped_df['mes'], grouped_df['focuses'])
    plt.title('Total Queimadas por MÃªs', fontsize=15)
    plt.xlabel('MÃªs')
    plt.tight_layout()
    st.pyplot(fig2)
    

#Terceiro grÃ¡fico -----------------------------------------------------------------------

#agrupando os dados pela data e calcule a soma do campo 'focuses'
grouped_df = df.groupby('date')['focuses'].sum().reset_index()

#definindo o estilo Seaborn
sns.set_theme()

#cria um grÃ¡fico de linha
fig3, ax3 = plt.subplots(figsize=(10,4))
ax3.plot_date(grouped_df['date'], grouped_df['focuses'], linestyle='solid', color='blue')
ax3.set_title('HistÃ³rico Queimadas', fontsize=12)
st.pyplot(fig3)

#texto
st.markdown("AtravÃ©s dos grÃ¡ficos acima podemos concluir que a regiÃ£o norte Ã© o principal foco do paÃ­s em relaÃ§Ã£o as queimadas, com exceÃ§Ã£o do Mato Grosso que aparece com grande representatividade. Outro ponto que podemos concluir Ã© que a sazonalidade das queimadas traz uma dispersÃ£o muito grande para os dados, nos perÃ­odos de pico prÃ³ximos a Setembro os casos podem chegar a 30.000, enquanto em perÃ­odos como MarÃ§o os casos ficam abaixo de 2.000. Isso jÃ¡ nos dÃ¡ alguns indÃ­cios de que para comparar de forma mais embasada a gestÃ£o dos dois governos no que se diz respeito as queimadas, teremos que aguardar o perÃ­odo de pico deste ano para termos insumos suficientes para fazer a comparaÃ§Ã£o.")


#2Âº Bloco************************************************************************************************************************
st.subheader("AnÃ¡lises de VariÃ¡veis")

#texto
st.markdown("O prÃ³ximo passo do estudo Ã© avaliar se variÃ¡veis como mÃ©dia de temperatura, mÃ©dia de temperatura mÃ¡xima e precipitaÃ§Ã£o ao longo do mÃªs se relacionam com a quantidade de queimadas.")

# Criando um widget de seleÃ§Ã£o para selecionar a variÃ¡vel a ser analisada
variaveis = ['Temperatura MÃ¡xima', 'Temperatura MÃ©dia', 'PrecipitaÃ§Ã£o']
variavel_selecionada = st.selectbox('Selecione uma variÃ¡vel:', options=list(variaveis))

df_enriquecido = pd.read_csv("dados_queimadas_enriquecidos.csv")
df_enriquecido['date'] = pd.to_datetime(df_enriquecido['date'])

#agrupando os dados pela data e calcule a soma do campo 'focuses'
group_df_variaveis = df_enriquecido.groupby('date').agg({
    'focuses': 'sum', 
    'temperature_2m_max': 'mean', 
    'temperature_2m_mean': 'mean', 
    'precipitation_sum': 'sum'}).reset_index()


#definindo o estilo Seaborn
sns.set_theme()

fig4, ax4 = plt.subplots(figsize=(10,6))
color = 'tab:blue'
ax4.set_ylabel('Queimadas', color=color)
ax4.plot_date(group_df_variaveis['date'], group_df_variaveis['focuses'],linestyle='solid', color='blue')


if variavel_selecionada == "Temperatura MÃ¡xima":
    coluna_variavel = "temperature_2m_max"
elif variavel_selecionada == "Temperatura MÃ©dia":
    coluna_variavel = "temperature_2m_mean"
elif variavel_selecionada == "PrecipitaÃ§Ã£o":
    coluna_variavel = "precipitation_sum"  

ax5 = ax4.twinx()  
color = 'tab:red'
ax5.set_ylabel(variavel_selecionada, color=color)  
ax5.plot_date(group_df_variaveis['date'], group_df_variaveis[coluna_variavel],linestyle='solid', color='red')

fig4.tight_layout()  
st.pyplot(fig4)


#texto
st.markdown("A anÃ¡lise de variÃ¡veis mostra nitidamente que temos uma grande relaÃ§Ã£o de mÃ©dia de temperatura mÃ¡xima e mÃ©dia de temperatura ao longo do mÃªs com a quantidade de queimadas, e a variÃ¡vel de precipitaÃ§Ã£o mostrou ter uma relaÃ§Ã£o inversa com a quantidade de queimadas, o que jÃ¡ era esperado. De uma forma geral, pelo que vimos atÃ© aqui as variÃ¡veis naturais possuem forte correlaÃ§Ã£o com as ocorrÃªncias de queimadas, o que sugere que as aÃ§Ãµes intencionais do homem ou nÃ£o sÃ£o tÃ£o representativas por nÃ£o ocorrerem tanto em outros perÃ­odos ou que estas aÃ§Ãµes intencionais ocorrem tambÃ©m em perÃ­odos que naturalmente jÃ¡ terÃ­amos mais casos de queimadas devido as altas temperaturas e a a baixa umidade.")

#3Âº Bloco************************************************************************************************************************
st.subheader("Bolsonaro X Lula")

st.markdown("Como foi dito anteriormente, para avaliar o governo Lula quanto a eficÃ¡cia no combate as queimadas precisarÃ­amos dar mais tempo, porque os perÃ­odos em que as queimadas comeÃ§am a ser mais frequentes Ã© a partir do meio do ano. Contudo, podemos fazer uma anÃ¡lise preliminar avaliando os dados que temos atÃ© o momento de Abril de 2023 e compararmos com os mesmos perÃ­odos dos Ãºltimos anos do governo Bolsonaro, e por fim utilizaremos o modelo preditivo para projetar Maio.")

#convertendo a coluna 'date' para datetime
df_enriquecido['date'] = pd.to_datetime(df_enriquecido['date'])

#cria as colunas 'year' e 'month'
df_enriquecido['ano'] = df_enriquecido['date'].dt.year
df_enriquecido['mÃªs'] = df_enriquecido['date'].dt.month

#agrupa os dados por ano e mÃªs
comparativo_ano = df_enriquecido.groupby(['ano', 'mÃªs'])['focuses'].sum().reset_index()
comparativo_ano = comparativo_ano[comparativo_ano['ano'] >= 2020]

#cores para os diferentes anos
colors = {2020: 'lightblue', 2021: 'blue', 2022: 'darkblue', 2023: 'red'}

#GrÃ¡fico 1
fig6, ax6 = plt.subplots(figsize=(10,6))
for ano in comparativo_ano[(comparativo_ano['ano']>=2020)]['ano'].unique():
    df_ano = comparativo_ano[comparativo_ano['ano'] == ano]
    if ano == 2023:
        df_ano = df_ano[df_ano['mÃªs'] != 5]
    ax6.plot(df_ano['mÃªs'], df_ano['focuses'], color=colors[ano], label=ano)

# Legendas e tÃ­tulos
ax6.set_xlabel('MÃªs')
ax6.set_ylabel('Qtd Queimadas')
ax6.legend()
plt.title('Total Queimadas por MÃªs', fontsize=15)
plt.tight_layout()
st.pyplot(fig6)
    
#GrÃ¡fico 2
comparativo_ini_ano = comparativo_ano[comparativo_ano['mÃªs'].isin([1, 2, 3, 4])]

#cria o grÃ¡fico de barras
fig7, ax7 = plt.subplots(figsize=(10,6))

#define a largura das barras
bar_width = 0.2

#cria o grÃ¡fico para cada ano
for i, ano in enumerate(comparativo_ini_ano['ano'].unique()):
    df_ano_ini = comparativo_ini_ano[comparativo_ini_ano['ano'] == ano]
    #adiciona um valor constante ao argumento `x` do mÃ©todo `bar` para ajustar a posiÃ§Ã£o das barras
    bars = ax7.bar(df_ano_ini['mÃªs'] + i*bar_width, df_ano_ini['focuses'], 
            color=colors[ano], label=ano, width=bar_width)
    
    #adiciona rÃ³tulos nas barras
    for bar in bars:
        yval = bar.get_height()
        ax7.text(bar.get_x() + bar.get_width()/2, yval, int(yval), 
                 ha='center', va='bottom', fontsize=10)

#legendas e tÃ­tulos
ax7.set_ylabel('Qtd Queimadas')

ax7.legend()

#define os ticks do eixo X para corresponderem ao meio das barras e define os rÃ³tulos dos ticks como os meses
ax7.set_xticks([1 + bar_width/2, 2 + bar_width/2, 3 + bar_width/2, 4 + bar_width/2])
ax7.set_xticklabels(['Janeiro', 'Fevereiro', 'MarÃ§o', 'Abril'])
plt.title('Total Queimadas por MÃªs', fontsize=15)
plt.tight_layout()
st.pyplot(fig7) 

# GrÃ¡fico 3 - Barras de valores acumulados por ano atÃ© o mÃªs de abril
#agrupando os dados pelos anos, somando os valores de 'focuses' dos primeiros 4 meses
fig8, ax8 = plt.subplots(figsize=(10,6))
comparativo_acum_ano = comparativo_ano[comparativo_ano['mÃªs'].isin([1, 2, 3, 4])]
comparativo_acum_ano = comparativo_acum_ano.groupby('ano')['focuses'].sum().reset_index()

#define a largura das barras
bar_width = 0.6

#cria o grÃ¡fico para cada ano
for i, ano in enumerate(comparativo_acum_ano['ano']):
    #desenha a barra
    bar = ax8.bar(i, comparativo_acum_ano.loc[i, 'focuses'], 
            color=colors[ano], label=ano, width=bar_width)
    
    #adiciona o valor acima da barra
    height = bar[0].get_height()
    ax8.text(bar[0].get_x() + bar[0].get_width()/2,  
            1.01*height,  
            '{}'.format(int(height)),  
            ha='center', va='bottom') 

# Legendas e tÃ­tulos
ax8.set_xlabel('Ano')
ax8.set_ylabel('Qtd Queimadas')
ax8.legend()

#define os ticks do eixo X para corresponderem ao meio das barras e define os rÃ³tulos dos ticks como os anos
ax8.set_xticks(range(len(comparativo_acum_ano)))
ax8.set_xticklabels(comparativo_acum_ano['ano'])

plt.tight_layout()
st.pyplot(fig8)


st.markdown("AtÃ© o momento na gestÃ£o do governo Lula tivemos menos casos de queimadas acumulados nos 4 primeiros meses do que nos 3 anos anteriores do governo Bolsonaro, mas os meses que serÃ£o mais crÃ­ticos para o governo nesse tema virÃ£o agora no meio do ano.")


#4Âº Bloco************************************************************************************************************************
st.subheader("Modelo preditivo")

st.markdown("Por fim, vamos projetar como serÃ¡ o mÃªs de Maio, jÃ¡ que ainda nÃ£o temos estes dados, considerando variÃ¡veis histÃ³ricas de queimadas e metereolÃ³gicas.")

df_projecao = pd.read_csv("dados_queimadas_previsao.csv")



#botÃ£o projetar
if st.button("Projetar"):

    #carregamento / instanciamento do modelo pkl
    mdl_lgbm = load_model('./pycaret_mdl_xg')

    #Acessando o modelo LGBMClassifier
    lgbm_model = mdl_lgbm.named_steps['trained_model']

    #predict do modelo
    ypred = predict_model(mdl_lgbm, data = df_projecao)
    df_projecao['focuses'] = ypred['prediction_label']

    #GrÃ¡fico ProjeÃ§Ã£o
    df_projecao_agrupado = df_projecao.groupby(['ano', 'mes'])['focuses'].sum().reset_index()
    df_projecao_agrupado = df_projecao_agrupado.rename(columns={'mes':'mÃªs'})
    comparativo_ano = comparativo_ano[(comparativo_ano['ano']<2023) | (comparativo_ano['mÃªs']<5)]
    comparativo_ano = pd.concat([comparativo_ano, df_projecao_agrupado], ignore_index=True)
    comparativo_ano = comparativo_ano[comparativo_ano['mÃªs']<6]

    # Cria o grÃ¡fico de barras
    fig8, ax8 = plt.subplots(figsize=(10,6))

    # Define a largura das barras
    bar_width = 0.2

    # Cria o grÃ¡fico para cada ano
    for i, ano in enumerate(comparativo_ano['ano'].unique()):
        df_ano_ini = comparativo_ano[comparativo_ano['ano'] == ano]
        # Adiciona um valor constante ao argumento `x` do mÃ©todo `bar` para ajustar a posiÃ§Ã£o das barras
        bars = ax8.bar(df_ano_ini['mÃªs'] + i*bar_width, df_ano_ini['focuses'], 
                color=colors[ano], label=ano, width=bar_width)

        # Adiciona rÃ³tulos nas barras
        for bar in bars:
            yval = bar.get_height()
            ax8.text(bar.get_x() + bar.get_width()/2, yval, int(yval), 
                     ha='center', va='bottom', fontsize=10)

    # Legendas e tÃ­tulos
    #ax7.set_xlabel('MÃªs')
    ax8.set_ylabel('Qtd Queimadas')
    ax8.legend()

    # Define os ticks do eixo X para corresponderem ao meio das barras e define os rÃ³tulos dos ticks como os meses
    ax8.set_xticks([1 + bar_width/2, 2 + bar_width/2, 3 + bar_width/2, 4 + bar_width/2, 5 + bar_width/2])
    ax8.set_xticklabels(['Janeiro', 'Fevereiro', 'MarÃ§o', 'Abril','Maio'])

    plt.tight_layout()
    st.pyplot(fig8)

    st.markdown("Como podemos ver, a projeÃ§Ã£o indica que iniciaremos o mÃªs de Maio com um pico menor que o ano passado mas maior do que 2020 e 2021. A grande diferenÃ§a que notamos com estes dois anos Ã© um possÃ­vel deslocamento do inÃ­cio do pico das queimadas para Maio em 22 e 23, enquanto em 20 e 21, esse perÃ­odo ocorreu de forma mais tardia.")







    

        
